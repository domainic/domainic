module Domainic
  module Type
    module Constraint
      # A constraint for validating string character sets.
      #
      # This constraint verifies that string values contain only characters from
      # specific character sets:
      # - ascii: ASCII characters (0x00-0x7F)
      # - alphanumeric: Letters and numbers
      # - alpha: Letters only
      # - numeric: Numbers only
      # - printable: Visible characters and spaces
      #
      # @example ASCII validation
      #   constraint = CharacterSetConstraint.new(:self, :ascii)
      #   constraint.satisfied?("hello")  # => true
      #   constraint.satisfied?("hÃ©llo")  # => false
      #
      # @example Alphanumeric validation
      #   constraint = CharacterSetConstraint.new(:self, :alphanumeric)
      #   constraint.satisfied?("abc123")  # => true
      #   constraint.satisfied?("abc-123") # => false
      #
      # @example Numeric validation
      #   constraint = CharacterSetConstraint.new(:self, :numeric)
      #   constraint.satisfied?("12345")   # => true
      #   constraint.satisfied?("123.45")  # => false
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      class CharacterSetConstraint
        type expected = :ascii | :alphanumeric | :alpha | :numeric | :printable

        include Behavior[expected, untyped, { }]

        # Valid character set patterns
        #
        # @return [Hash{Symbol => Regexp}] Map of set names to validation patterns
        VALID_SETS: Hash[expected, Regexp]

        # Get a human-readable description of the character set requirement.
        #
        # @deprecated this method will be removed in version 0.1.0
        #
        # @example
        #   constraint = CharacterSetConstraint.new(:self, :numeric)
        #   constraint.short_description # => "only numeric characters"
        #
        # @return [String] A description of the character set requirement
        def short_description: ...

        # Get a human-readable description of why character validation failed.
        #
        # @deprecated this method will be removed in version 0.1.0
        #
        # @example
        #   constraint = CharacterSetConstraint.new(:self, :numeric)
        #   constraint.satisfied?("abc123")
        #   constraint.short_violation_description # => "non-numeric characters"
        #
        # @return [String] A description of the character set violation
        def short_violation_description: ...

        # Convert character set name to symbol.
        #
        # @param expectation [String, Symbol] The character set name
        #
        # @return [Symbol] The character set name as a symbol
        def coerce_expectation: ...

        # Check if the string contains only characters from the expected set.
        #
        # @return [Boolean] true if all characters match the expected set
        def satisfies_constraint?: ...

        # Validate that the expectation is a valid character set.
        #
        # @param expectation [Object] The character set to validate
        #
        # @raise [ArgumentError] if the expectation is not a valid character set
        # @return [void]
        def validate_expectation!: ...
      end
    end
  end
end
