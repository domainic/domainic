module Domainic
  module Type
    module Constraint
      # A constraint for validating that comparable values fall within a specified range.
      #
      # This constraint allows for validating any values that implement comparison operators
      # (<, <=, >, >=) against minimum and maximum boundaries. It supports specifying either
      # or both boundaries, allowing for open-ended ranges when appropriate. This makes it
      # suitable for numeric ranges, date/time ranges, or any other comparable types.
      #
      # @example Validating numeric ranges
      #   constraint = RangeConstraint.new(:self, { minimum: 1, maximum: 10 })
      #   constraint.satisfied?(5)  # => true
      #   constraint.satisfied?(15) # => false
      #
      # @example Validating date ranges
      #   constraint = RangeConstraint.new(:self, {
      #     minimum: Date.new(2024, 1, 1),
      #     maximum: Date.new(2024, 12, 31)
      #   })
      #   constraint.satisfied?(Date.new(2024, 6, 15))  # => true
      #   constraint.satisfied?(Date.new(2023, 12, 31)) # => false
      #
      # @example Validating with only minimum
      #   constraint = RangeConstraint.new(:self, { minimum: Time.now })
      #   constraint.satisfied?(Time.now + 3600)  # => true
      #   constraint.satisfied?(Time.now - 3600)  # => false
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      class RangeConstraint
        interface _Compatible
          def <: (untyped other) -> bool

          def <=: (untyped other) -> bool

          def >: (untyped other) -> bool

          def >=: (untyped other) -> bool

          def inspect: () -> untyped

          def nil?: () -> bool

          def send: (Symbol method_name, *untyped arguments, **untyped keyword_arguments) -> untyped
        end

        type expected = { ?minimum: _Compatible, ?maximum: _Compatible }

        type options = { ?inclusive: bool }

        include Behavior[expected, _Compatible, options]

        # Get a human-readable description of the range constraint.
        #
        # @deprecated this method will be removed in version 0.1.0
        #
        # @example With both bounds
        #   constraint = RangeConstraint.new(:self, { minimum: 1, maximum: 10 })
        #   constraint.description
        #   # => "greater than or equal to 1 and less than or equal to 10"
        #
        # @example With only minimum
        #   constraint = RangeConstraint.new(:self, { minimum: 0 })
        #   constraint.description # => "greater than or equal to 0"
        #
        # @example With only maximum
        #   constraint = RangeConstraint.new(:self, { maximum: 100 })
        #   constraint.description # => "less than or equal to 100"
        #
        # @return [String] A description of the range bounds
        def short_description: ...

        # The description of the violations that caused the constraint to be unsatisfied.
        #
        # @deprecated this method will be removed in version 0.1.0
        #
        # This is used to help compose a error message when the constraint is not satisfied.
        # Implementing classes can override this to provide more specific failure messages.
        #
        # @return [String] The description of the constraint when it fails.
        def short_violation_description: ...

        def coerce_expectation: ...

        # Check if the actual value falls within the specified range.
        #
        # Uses -Infinity and +Infinity as default bounds when minimum or maximum
        # are not specified, respectively.
        #
        # @return [Boolean] true if the value is within range
        def satisfies_constraint?: ...

        # Validate that the expected value is a properly formatted range specification.
        #
        # @param expectation [Hash] The range specification to validate
        #
        # @raise [ArgumentError] if the specification is invalid
        # @return [void]
        def validate_expectation!: ...

        private

        # Check if the range constraint is inclusive.
        #
        # @return [Boolean] `true` if the range is inclusive, `false` otherwise
        def inclusive?: () -> bool

        # Validate the minimum and maximum values in a range specification.
        #
        # @param expectation [Hash] The range specification to validate
        #
        # @raise [ArgumentError] if the values are invalid
        # @return [void]
        def validate_minimum_and_maximum!: (untyped expectation) -> void

        # Validate the minimum and maximum value types are compatible with the constraint.
        #
        # @param expectation [Hash] The range specification to validate
        #
        # @raise [ArgumentError] if the values are invalid
        # @return [void]
        def validate_minimum_and_maximum_types!: (untyped expectation) -> void
      end
    end
  end
end
