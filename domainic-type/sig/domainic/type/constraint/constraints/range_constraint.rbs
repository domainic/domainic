module Domainic
  module Type
    module Constraint
      # A constraint for validating that numeric values fall within a specified range.
      #
      # This constraint allows for validating numeric values against minimum and maximum
      # boundaries. It supports specifying either or both boundaries, allowing for
      # open-ended ranges when appropriate.
      #
      # @example Validating with both minimum and maximum
      #   constraint = RangeConstraint.new(:self, { minimum: 1, maximum: 10 })
      #   constraint.satisfied?(5)  # => true
      #   constraint.satisfied?(15) # => false
      #
      # @example Validating with only minimum
      #   constraint = RangeConstraint.new(:self, { minimum: 0 })
      #   constraint.satisfied?(10)  # => true
      #   constraint.satisfied?(-1)  # => false
      #
      # @example Validating with only maximum
      #   constraint = RangeConstraint.new(:self, { maximum: 100 })
      #   constraint.satisfied?(50)   # => true
      #   constraint.satisfied?(150)  # => false
      #
      # @api private
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      class RangeConstraint
        type expected = { ?minimum: Numeric, ?maximum: Numeric }

        include Behavior[expected, Numeric, { }]

        # Get a human-readable description of the range constraint.
        #
        # @example With both bounds
        #   constraint = RangeConstraint.new(:self, { minimum: 1, maximum: 10 })
        #   constraint.description
        #   # => "greater than or equal to 1 and less than or equal to 10"
        #
        # @example With only minimum
        #   constraint = RangeConstraint.new(:self, { minimum: 0 })
        #   constraint.description # => "greater than or equal to 0"
        #
        # @example With only maximum
        #   constraint = RangeConstraint.new(:self, { maximum: 100 })
        #   constraint.description # => "less than or equal to 100"
        #
        # @return [String] A description of the range bounds
        def short_description: ...

        # The description of the violations that caused the constraint to be unsatisfied.
        #
        # This is used to help compose a error message when the constraint is not satisfied.
        # Implementing classes can override this to provide more specific failure messages.
        #
        # @return [String] The description of the constraint when it fails.
        def short_violation_description: ...

        def coerce_expectation: ...

        # Check if the actual value falls within the specified range.
        #
        # Uses -Infinity and +Infinity as default bounds when minimum or maximum
        # are not specified, respectively.
        #
        # @return [Boolean] true if the value is within range
        def satisfies_constraint?: ...

        # Validate that the expected value is a properly formatted range specification.
        #
        # @param expectation [Hash] The range specification to validate
        #
        # @raise [ArgumentError] if the specification is invalid
        # @return [void]
        def validate_expectation!: ...

        # Validate the minimum and maximum values in a range specification.
        #
        # @param expectation [Hash] The range specification to validate
        #
        # @raise [ArgumentError] if the values are invalid
        # @return [void]
        def validate_minimum_and_maximum!: (expected expectation) -> void
      end
    end
  end
end
