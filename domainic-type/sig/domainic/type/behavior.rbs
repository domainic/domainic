module Domainic
  module Type
    # A module providing core type validation behavior.
    #
    # The Behavior module provides the foundation for type validation in the Domainic
    # system. It manages a set of constraints that define what makes a value valid
    # for a particular type and provides methods to validate values against these
    # constraints.
    #
    # Key features:
    # - Intrinsic constraints defined at the class level
    # - Instance-level constraint customization
    # - Support for both silent and exception-raising validation
    # - Case equality operator integration (===)
    #
    # @example Defining a custom type
    #   class MyType
    #     include Domainic::Type::Behavior
    #
    #     private
    #
    #     def initialize(**options)
    #       super
    #       constrain(:self, :string_check, :string)
    #       constrain(:length, :minimum, :range, minimum: 5)
    #     end
    #   end
    #
    # @example Using a custom type
    #   type = MyType.new
    #   type.validate("hello")     # => true
    #   type.validate("hi")        # => false
    #   type.validate!(123)        # raises TypeError
    #
    #   case "hello"
    #   when MyType then puts "Valid!"
    #   end
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    module Behavior
      @constraint_set: Constraint::Set

      # Configure class methods when module is included.
      #
      # @param base [Class] The class including this module
      #
      # @return [void]
      def self.included: (Class | Module base) -> void

      # Class methods for types including the Behavior module.
      #
      # These methods provide class-level validation capabilities and constraint
      # management.
      #
      # @api private
      #
      # @since 0.1.0
      module ClassMethods
        @intrinsic_constraints: Constraint::Set

        # Convert the type to a String representation.
        #
        # @return [String] The type as a String
        def to_s: () -> String

        alias inspect to_s

        # Validate a value against this type.
        #
        # @param value [Object] The value to validate
        #
        # @return [Boolean] true if the value is valid
        def validate: (untyped value) -> bool

        alias === validate

        # Validate a value against this type, raising an error on failure.
        #
        # @param value [Object] The value to validate
        #
        # @raise [TypeError] if the value is invalid
        # @return [Boolean] true if the value is valid
        def validate!: (untyped value) -> bool

        private

        # Add an intrinsic constraint to this type.
        #
        # @see Constraint::Set#add
        #
        # @return [void]
        def intrinsic: (Type::accessor accessor, String | Symbol constraint_type, ?untyped expectation, **untyped options) -> void

        # Get the set of intrinsic constraints for this type.
        #
        # @return [Constraint::Set] The constraint set
        def intrinsic_constraints: () -> Constraint::Set

        # Delegate unknown methods to a new instance.
        #
        # @return [Object] The result of calling the method on a new instance
        def method_missing: (Symbol method_name, *untyped arguments, **untyped keyword_arguments) -> Behavior

        # Check if an unknown method can be delegated.
        #
        # @param method_name [Symbol] The name of the method
        # @param _include_private [Boolean] Whether to include private methods
        #
        # @return [Boolean] true if the method can be delegated
        def respond_to_missing?: (Symbol method_name, ?bool _include_private) -> bool
      end

      # Initialize a new type instance.
      #
      # @param options [Hash] Configuration options for constraints
      #
      # @return [void]
      def initialize: (**untyped) -> void

      # Convert the type to a String representation.
      #
      # @return [String] The type as a String
      def to_s: () -> String

      alias inspect to_s

      # Validate a value against this type's constraints.
      #
      # @param value [Object] The value to validate
      #
      # @return [Boolean] true if the value satisfies all constraints
      def validate: (untyped value) -> bool

      alias === validate

      # Validate a value against this type's constraints, raising an error on failure.
      #
      # @param value [Object] The value to validate
      #
      # @raise [TypeError] if the value fails any constraints
      # @return [Boolean] true if the value satisfies all constraints
      def validate!: (untyped value) -> bool

      private

      # Add a constraint to this type instance.
      #
      # @see Constraint::Set#add
      #
      # @return [self]
      def constrain: (Type::accessor accessor, String | Symbol constraint_type, ?untyped expectation, **untyped options) -> self
    end
  end
end
