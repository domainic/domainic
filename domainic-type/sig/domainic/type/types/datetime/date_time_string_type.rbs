module Domainic
  module Type
    # A type for validating and constraining strings to match various datetime formats.
    #
    # This class includes behaviors for handling datetime constraints and ensures that
    # a string matches one of the predefined datetime formats (e.g., ISO 8601, RFC2822).
    #
    # @example Validating American format
    #   type = Domainic::Type::DateTimeStringType.new
    #   type.having_american_format.validate!("01/31/2024")
    #
    # @example Validating ISO 8601 format
    #   type = Domainic::Type::DateTimeStringType.new
    #   type.having_iso8601_format.validate!("2024-01-01T12:00:00Z")
    #
    # @example Validating RFC2822 format
    #   type = Domainic::Type::DateTimeStringType.new
    #   type.having_rfc2822_format.validate!("Thu, 31 Jan 2024 13:30:00 +0000")
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    class DateTimeStringType
      extend Behavior::ClassMethods

      include Behavior

      include Behavior::DateTimeBehavior

      # The `Format` module provides a set of regular expressions for validating
      # various datetime formats, including ISO 8601, RFC2822, American, European,
      # full month names, abbreviated month names, and 12-hour clock formats.
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      module Format
        # Matches ISO 8601 datetime formats, including:
        # - `2024-01-01T12:00:00.000+00:00`
        # - `2024-01-01T12:00:00+00:00`
        # - `2024-01-01T12:00:00.000`
        # - `2024-01-01T12:00:00`
        # - `20240101T120000+0000` (basic format)
        # @return [Regexp]
        ISO8601: Regexp

        # Matches RFC2822 datetime formats, including:
        # - `Thu, 31 Jan 2024 13:30:00 +0000`
        # - `31 Jan 2024 13:30:00 +0000`
        # @return [Regexp]
        RFC2822: Regexp

        # Matches American-style dates with optional time in 12-hour or 24-hour formats, including:
        # - `01/31/2024`
        # - `01/31/2024 12:30:00`
        # - `01/31/2024 12:30 PM`
        # @return [Regexp]
        AMERICAN: Regexp

        # Matches European-style dates with optional time in 24-hour format, including:
        # - `31.01.2024`
        # - `31.01.2024 12:30:00`
        # @return [Regexp]
        EUROPEAN: Regexp

        # Matches datetime formats with full month names, including:
        # - `January 31, 2024 12:00:00`
        # - `January 31, 2024 12:00`
        # @return [Regexp]
        FULL_MONTH_NAME: Regexp

        # Matches datetime formats with abbreviated month names, including:
        # - `Jan 31, 2024 12:00:00`
        # - `Jan 31, 2024 12:00`
        # @return [Regexp]
        ABBREVIATED_MONTH_NAME: Regexp

        # Matches datetime formats using a 12-hour clock with AM/PM, including:
        # - `2024-01-01 01:30:00 PM`
        # - `2024-01-01 01:30 PM`
        # @return [Regexp]
        TWELVE_HOUR_FORMAT: Regexp
      end

      # Constrain the type to match American-style datetime formats.
      #
      # @return [self] self for method chaining
      def having_american_format: () -> self

      alias american having_american_format

      alias having_us_format having_american_format

      alias us_format having_american_format

      # Constrain the type to match European-style datetime formats.
      #
      # @return [self] self for method chaining
      def having_european_format: () -> self

      alias european having_european_format

      alias having_eu_format having_european_format

      alias eu_format having_european_format

      # Constrain the type to match ISO 8601 datetime formats.
      #
      # @return [self] self for method chaining
      def having_iso8601_format: () -> self

      alias iso8601 having_iso8601_format

      alias iso8601_format having_iso8601_format

      # Constrain the type to match RFC2822 datetime formats.
      #
      # @return [self] self for method chaining
      def having_rfc2822_format: () -> self

      alias rfc2822 having_rfc2822_format

      alias rfc2822_format having_rfc2822_format
    end
  end
end
