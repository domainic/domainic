module Domainic
  module Type
    # A class for formatting detailed type validation error messages.
    #
    # This class helps create clear, descriptive error messages when type validation
    # fails. It formats both type mismatches and constraint validation failures into
    # a readable multi-line message.
    #
    # @example Basic usage
    #   type = StringType.new
    #   failures = [LengthConstraint, FormatConstraint]
    #   actual = 123
    #
    #   ValidationError.details_for(type, failures, actual)
    #   # => "Expected a StringType got a Integer
    #   #     - Expected length >= 5, but got length of 3
    #   #     - Expected to match /\w+/, but got '123'"
    #
    # The error message format follows these principles:
    # - First line shows the expected type vs actual type
    # - Each constraint failure is listed with expected vs actual values
    # - Type failures are prioritized over constraint failures
    #
    # @api private
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    class ValidationError
      # Format a validation error message.
      #
      # @overload details_for(type, failures, actual)
      #   @param type [Behavior] The type that validation failed for
      #   @param failures [Array<Constraint::Behavior>] The constraints that failed
      #   @param actual [Object] The actual value that failed validation
      #
      # @return [String] The formatted error message
      def self.details_for: (Behavior type, Array[Constraint::Behavior] failures, untyped actual) -> String

      # Initialize a new validation error formatter.
      #
      # @param type [Behavior] The type that validation failed for
      # @param failures [Array<Constraint::Behavior>] The constraints that failed
      # @param actual [Object] The actual value that failed validation
      #
      # @return [void]
      def initialize: (Behavior type, Array[Constraint::Behavior] failures, untyped actual) -> void

      # Format the validation error message.
      #
      # @return [String] The formatted error message
      def details: () -> String

      private

      # Format the type mismatch message.
      #
      # @return [String] The type mismatch message
      def type_mismatch_message: () -> String

      # Format the constraint failure messages.
      #
      # @return [Array<String>] The constraint failure messages
      def constraint_failure_messages: () -> Array[String]

      # Get the appropriate article (a/an) for a word.
      #
      # @param word [Class, Module, Object, String] The word to get an article for
      #
      # @return [String] The appropriate article
      def article_for: (Class | Module | Object | String word) -> String
    end
  end
end
