module Domainic
  module Type
    # A module providing convenient factory methods for creating type instances.
    #
    # This module serves as a temporary access point for type creation in the Domainic::Type
    # system, offering a collection of factory methods with consistent naming patterns.
    # Each method creates and configures a specific type instance, with optional nilable
    # variants and aliases for common use cases.
    #
    # @note This module is considered temporary and may be significantly altered or removed
    #   before the final release. It should not be considered part of the stable API.
    #
    # @example Basic type creation
    #   include Domainic::Type::Definitions
    #
    #   string_type = _String()
    #   array_type = _Array()
    #   hash_type = _Hash()
    #
    # @example Creating nilable types
    #   nullable_string = _String?()
    #   nullable_array = _Array?()
    #
    # @example Using union types
    #   string_or_symbol = _Union(String, Symbol)
    #   boolean = _Boolean()  # Union of TrueClass and FalseClass
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    module Definitions
      # Creates an AnythingType instance.
      #
      # @example
      #   type = _Anything
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::AnythingType] the created type
      def _Anything: (**__todo__ options) -> AnythingType

      alias _Any _Anything

      # Creates an ArrayType instance.
      #
      # @example
      #   type = _Array
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::ArrayType] the created type
      def _Array: (**__todo__ options) -> ArrayType

      alias _List _Array

      # Creates a nilable ArrayType instance.
      #
      # @example
      #   type = _Array?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Array or NilClass)
      def _Array?: (**__todo__ options) -> UnionType

      alias _List? _Array?

      # Creates a Boolean type.
      #
      # Represents a union of TrueClass and FalseClass.
      #
      # @example
      #   type = _Boolean
      #
      # @return [Domainic::Type::UnionType] the created type
      def _Boolean: () -> UnionType

      alias _Bool _Boolean

      # Creates a nilable Boolean type.
      #
      # @example
      #   type = _Boolean?
      #
      # @return [Domainic::Type::UnionType] the created type (TrueClass, FalseClass, or NilClass)
      def _Boolean?: () -> UnionType

      alias _Bool? _Boolean?

      # Creates a CUIDType instance
      #
      # @example
      #   type = _CUID.v2
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::CUIDType] the created type
      def _CUID: (**__todo__ options) -> CUIDType

      alias _Cuid _CUID

      # Creates a nilable CUIDType instance.
      #
      # @example
      #   _CUID? === "la6m1dv00000gv25zp9ru12g" # => true
      #   _CUID? === nil                        # => true
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (CUIDType or NilClass)
      def _CUID?: (**__todo__ options) -> UnionType

      alias _Cuid? _CUID?

      # Creates a DuckType instance.
      #
      # DuckType allows specifying behavior based on method availability.
      #
      # @example
      #   type = _Duck(respond_to: :to_s)
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::DuckType] the created type
      def _Duck: (**__todo__ options) -> DuckType

      alias _Interface _Duck

      alias _Protocol _Duck

      alias _RespondingTo _Duck

      # Creates an EmailAddressType instance.
      #
      # EmailAddressType restricts values to valid email addresses.
      #
      # @example
      #   type = _EmailAddress.having_hostname('example.com')
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::EmailAddressType] the created type
      def _EmailAddress: (**__todo__ options) -> EmailAddressType

      alias _Email _EmailAddress

      # Creates a nilable EmailAddressType instance.
      #
      # @example
      #   _EmailAddress?.validate("user@example.com") # => true
      #   _EmailAddress?.validate(nil)                # => true
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (EmailAddress or NilClass)
      def _EmailAddress?: (**__todo__ options) -> UnionType

      alias _Email? _EmailAddress?

      # Creates an EnumType instance.
      #
      # EnumType restricts values to a specific set of literals.
      #
      # @example
      #   type = _Enum(:red, :green, :blue)
      #
      # @param literals [Array<Object>] the allowed literals
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::EnumType] the created type
      def _Enum: (*untyped literals, **__todo__ options) -> EnumType

      alias _Literal _Enum

      # Creates a nilable EnumType instance.
      #
      # @example
      #   type = _Enum?(:red, :green, :blue)
      #
      # @param literals [Array<Object>] the allowed literals
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Enum or NilClass)
      def _Enum?: (*untyped literals, **__todo__ options) -> UnionType

      alias _Literal? _Enum?

      # Creates a FloatType instance.
      #
      # @example
      #   type = _Float
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::FloatType] the created type
      def _Float: (**__todo__ options) -> FloatType

      alias _Decimal _Float

      alias _Real _Float

      # Creates a nilable FloatType instance.
      #
      # @example
      #   type = _Float?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Float or NilClass)
      def _Float?: (**__todo__ options) -> UnionType

      alias _Decimal? _Float?

      alias _Real? _Float?

      # Creates a HashType instance.
      #
      # @example
      #   type = _Hash
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::HashType] the created type
      def _Hash: (**__todo__ options) -> HashType

      alias _Map _Hash

      # Creates a nilable HashType instance.
      #
      # @example
      #   type = _Hash?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Hash or NilClass)
      def _Hash?: (**__todo__ options) -> UnionType

      alias _Map? _Hash?

      # Creates a HostnameType instance.
      #
      # HostnameType restricts values to valid hostnames.
      #
      # @example
      #   type = _Hostname.matching('example.com')
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::HostnameType] the created type
      def _Hostname: (**__todo__ options) -> HostnameType

      # Creates a nilable HostnameType instance.
      #
      # @example
      #   _Hostname?.validate("example.com") # => true
      #   _Hostname?.validate(nil)           # => true
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Hostname or NilClass)
      def _Hostname?: (**__todo__ options) -> UnionType

      # Creates a UnionType of IntegerType, UUIDType, and CUIDType
      #
      # @example
      #   _ID === 1234567890                             # => true
      #   _ID === '123e4567-e89b-42d3-a456-426614174000' # => true
      #   _ID === 'la6m1dv00000gv25zp9ru12g'             # => true
      #
      # @return [Domainic::Type::UnionType] the created type
      def _ID: () -> UnionType

      # Creates a nilable UnionType of IntegerType, UUIDType, and CUIDType
      #
      # @example
      #   _ID === 1234567890                             # => true
      #   _ID === '123e4567-e89b-42d3-a456-426614174000' # => true
      #   _ID === 'la6m1dv00000gv25zp9ru12g'             # => true
      #   _ID === nil                                    # => true
      #
      # @return [Domainic::Type::UnionType] the created type
      def _ID?: () -> UnionType

      # Create an InstanceType instance.
      #
      # @example
      #   _type = _Instance.of(User)
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::InstanceType]
      def _Instance: (**__todo__ options) -> InstanceType

      alias _Record _Instance

      # Create an InstanceType instance.
      #
      # @example
      #   _type = _Instance?(of: User)
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (InstanceType or NilClass)
      def _Instance?: (**__todo__ options) -> UnionType

      alias _Record? _Instance?

      # Creates an IntegerType instance.
      #
      # @example
      #   type = _Integer
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::IntegerType] the created type
      def _Integer: (**__todo__ options) -> IntegerType

      alias _Int _Integer

      alias _Number _Integer

      # Creates a nilable IntegerType instance.
      #
      # @example
      #   type = _Integer?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Integer or NilClass)
      def _Integer?: (**__todo__ options) -> UnionType

      alias _Int? _Integer?

      alias _Number? _Integer?

      # Creates a Nilable (nullable) type.
      #
      # Combines one or more types with `NilClass` to allow nil values.
      #
      # @example
      #   type = _Nilable(String, Symbol)
      #
      # @param types [Array<Class, Module, Behavior>] the base types
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (NilClass or other specified types)
      def _Nilable: (*Class | Module | Behavior[untyped, untyped, untyped] types, **__todo__ options) -> UnionType

      alias _Nullable _Nilable

      # Creates a StringType instance.
      #
      # @example
      #   type = _String
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::StringType] the created type
      def _String: (**__todo__ options) -> StringType

      alias _Text _String

      # Creates a nilable StringType instance.
      #
      # @example
      #   type = _String?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (String or NilClass)
      def _String?: (**__todo__ options) -> UnionType

      alias _Text? _String?

      # Creates a SymbolType instance.
      #
      # @example
      #   type = _Symbol
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::SymbolType] the created type
      def _Symbol: (**__todo__ options) -> SymbolType

      alias _Interned _Symbol

      # Creates a nilable SymbolType instance.
      #
      # @example
      #   type = _Symbol?
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (Symbol or NilClass)
      def _Symbol?: (**__todo__ options) -> UnionType

      alias _Interned? _Symbol?

      # Creates a UUIDType instance
      #
      # @example
      #   type = _UUID.v4_compact
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UUIDType] the created type
      def _UUID: (**__todo__ options) -> UUIDType

      alias _Uuid _UUID

      # Creates a nilable UUIDType instance.
      #
      # @example
      #   _UUID? === '123e4567-e89b-42d3-a456-426614174000' # => true
      #   _UUID? === nil                                    # => true
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (UUIDType or NilClass)
      def _UUID?: (**__todo__ options) -> UnionType

      alias _Uuid? _UUID?

      # Creates a UnionType instance.
      #
      # Allows combining multiple types into a single union type.
      #
      # @example
      #   type = _Union(String, Symbol)
      #
      # @param types [Array<Class, Module, Behavior>] the types included in the union
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type
      def _Union: (*Class | Module | Behavior[untyped, untyped, untyped] types, **__todo__ options) -> UnionType

      alias _Either _Union

      # Creates a URIType instance.
      #
      # URIType restricts values to valid URIs.
      #
      # @example
      #   type = _URI.having_scheme('https')
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::URIType] the created type
      def _Uri: (**__todo__ options) -> URIType

      alias _Url _Uri

      # Creates a nilable URIType instance.
      #
      # @example
      #   _Uri?.validate("https://example.com") # => true
      #   _Uri?.validate(nil)                   # => true
      #
      # @param options [Hash] additional configuration options
      #
      # @return [Domainic::Type::UnionType] the created type (URIType or NilClass)
      def _Uri?: (**__todo__ options) -> UnionType

      alias _Url? _Uri?

      # Creates a VoidType instance.
      #
      # Represents an operation that returns no value.
      #
      # @example
      #   type = _Void
      #
      # @return [Domainic::Type::VoidType] the created type
      def _Void: () -> VoidType
    end
  end
end
