module Domainic
  module Attributer
    class Attribute
      # A mixin providing common functionality for classes that belong to an Attribute.
      #
      # This module provides initialization and duplication behavior for classes that are owned
      # by and work in conjunction with an Attribute instance. These classes typically handle
      # specific aspects of attribute processing such as coercion, validation, or callbacks.
      #
      # @author {https://aaronmallen.me Aaron Allen}
      # @since 0.1.0
      module BelongsToAttribute
        @attribute: Attribute

        # Initialize a new instance that belongs to an attribute.
        #
        # @param attribute [Attribute] the attribute this instance belongs to
        #
        # @return [void]
        def initialize: (Attribute attribute, *untyped, **untyped) -> void

        # Create a duplicate instance associated with a new attribute.
        #
        # @param new_attribute [Attribute] the new attribute to associate with
        #
        # @return [BelongsToAttribute] a duplicate instance
        def dup_with_attribute: (Attribute attribute) -> BelongsToAttribute

        private

        # Generate a method name for error messages.
        #
        # @return [String] the formatted method name
        def attribute_method_name: () -> String

        # Ensure that an attribute is a valid {Attribute} instance.
        #
        # @param attribute [Attribute] the attribute to validate
        #
        # @raise [TypeError] if the attribute is not a valid {Attribute} instance
        # @return [void]
        def validate_attribute!: (Attribute attribute) -> void
      end
    end
  end
end
