module Domainic
  module Command
    # A value object representing the outcome of a command execution. The Result class provides
    # a consistent interface for handling both successful and failed command executions, including
    # return data and error information.
    #
    # Results are created through factory methods rather than direct instantiation, making the
    # intent of the result clear:
    #
    # @example Creating a success result
    #   result = Result.success(value: 42)
    #   result.successful? #=> true
    #   result.value #=> 42
    #
    # @example Creating a failure result
    #   result = Result.failure_at_input(
    #     { name: "can't be blank" },
    #     context: { attempted_name: nil }
    #   )
    #   result.failure? #=> true
    #   result.errors[:name] #=> ["can't be blank"]
    #
    # Results use status codes that align with Unix exit codes, making them suitable for
    # CLI applications:
    # * 0 - Successful execution
    # * 1 - Runtime failure
    # * 2 - Input validation failure
    # * 3 - Output validation failure
    #
    # @example CLI usage
    #   def self.run
    #     result = MyCommand.call(args)
    #     puts result.errors.full_messages if result.failure?
    #     exit(result.status_code)
    #   end
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    class Result
      @data: Struct

      @status_code: Integer

      @errors: ErrorSet

      # The structured data returned by the command
      #
      # @return [Struct] A frozen struct containing the command's output data
      attr_reader data: Struct

      # The errors that occurred during command execution
      #
      # @return [ErrorSet] The set of errors from the command
      attr_reader errors: ErrorSet

      # The status code indicating the result of the command execution
      #
      # @return [Integer] The status code (0 for success, non-zero for failures)
      attr_reader status_code: Integer

      # Creates a new failure result with the given status
      #
      # @param errors [Object] The errors that caused the failure
      # @param context [Hash] Optional context data for the failure
      # @param status [Integer] The status code for the failure (defaults to FAILED_AT_RUNTIME)
      #
      # @return [Result] A new failure result
      def self.failure: (untyped errors, ?Hash[String | Symbol, untyped] context, ?status: Integer) -> Result

      # Creates a new input validation failure result
      #
      # @param errors [Object] The validation errors
      # @param context [Hash] Optional context data for the failure
      #
      # @return [Result] A new input validation failure result
      def self.failure_at_input: (untyped errors, ?Hash[String | Symbol, untyped] context) -> Result

      # Creates a new output validation failure result
      #
      # @param errors [Object] The validation errors
      # @param context [Hash] Optional context data for the failure
      #
      # @return [Result] A new output validation failure result
      def self.failure_at_output: (untyped errors, ?Hash[String | Symbol, untyped] context) -> Result

      # Creates a new success result
      #
      # @param context [Hash] The successful result data
      #
      # @return [Result] A new success result
      def self.success: (Hash[String | Symbol, untyped] context) -> Result

      # Creates a new result instance
      #
      # @param status_code [Integer] The status code for the result
      # @param context [Hash] The data context for the result
      # @param errors [Object, nil] Any errors that occurred
      #
      # @raise [ArgumentError] If status_code is invalid or context is not a Hash
      # @return [void]
      def initialize: (Integer status, ?context: Hash[String | Symbol, untyped], ?errors: untyped) -> void

      # Indicates whether the command failed
      #
      # @return [Boolean] true if the command failed; false otherwise
      def failure?: () -> bool

      alias failed? failure?

      # Indicates whether the command succeeded
      #
      # @return [Boolean] true if the command succeeded; false otherwise
      def successful?: () -> bool

      alias success? successful?

      # Chains the execution of another command based on the current result's success.
      #
      # This method allows you to conditionally execute further logic or commands
      # if the current result is successful. If the current result is a failure,
      # it is returned immediately without invoking the provided block.
      #
      # @example Chaining commands with then
      #   result = CreateUser.call(name: "John")
      #              .then { |r| SendWelcomeEmail.call(user_id: r.user[:id]) }
      #              .then { |r| NotifyAdmin.call(user_id: r.user[:id]) }
      #
      # @yield [result] Provides the current successful result to the block.
      # @yieldparam [Result] result The current successful result object.
      # @yieldreturn [Object] Any object resulting from the block.
      #
      # @return [Object] The new result or output object, or the current result if failed.
      def then: () { (self) -> untyped } -> untyped

      alias and_then then

      private

      # Initializes the data struct from the context hash
      #
      # @param context [Hash] The context hash to convert to a struct
      # @raise [ArgumentError] If context is not a Hash
      # @return [void]
      def initialize_data: (untyped context) -> untyped

      # Validates and initializes the status code
      #
      # @param status_code [Integer] The status code to validate
      # @raise [ArgumentError] If the status code is not valid
      # @return [void]
      def initialize_status_code: (untyped status_code) -> untyped

      # Delegate method calls to the data struct
      #
      # @param method_name [String, Symbol] The method name to call
      #
      # @return [Object] The result of the method call
      def method_missing: ...

      # Indicates whether the data struct responds to the given method
      #
      # @param method_name [String, Symbol] The method name to check
      # @param _include_private [Boolean] Whether to include private methods
      #
      # @return [Boolean] `true` if the data struct responds to the method; `false` otherwise
      def respond_to_missing?: (String | Symbol method_name, ?bool include_private) -> bool
    end
  end
end
