module Domainic
  module Command
    # Class methods that are extended onto any class that includes {Command}. These methods provide
    # the DSL for defining command inputs and outputs, as well as class-level execution methods.
    #
    # @author {https://aaronmallen.me Aaron Allen}
    # @since 0.1.0
    module ClassMethods
      @input_context_class: singleton(Context::InputContext)

      @runtime_context_class: singleton(Context::RuntimeContext)

      @output_context_class: singleton(Context::OutputContext)

      # Specifies an external input context class for the command
      #
      # @param input_context_class [Class] A subclass of {Context::InputContext}
      #
      # @raise [ArgumentError] If the provided class is not a subclass of {Context::InputContext}
      # @return [void]
      def accepts_arguments_matching: (singleton(Context::InputContext) input_context_class) -> void

      # Defines an input argument for the command
      #
      # @overload argument(name, *type_validator_and_description, **options)
      #   @param name [String, Symbol] The name of the argument
      #   @param type_validator_and_description [Array<Class, Module, Object, Proc, String, nil>] Type validator or
      #     description arguments
      #   @param options [Hash] Configuration options for the argument
      #   @option options [Object] :default A static default value
      #   @option options [Proc] :default_generator A proc that generates the default value
      #   @option options [Object] :default_value Alias for :default
      #   @option options [String, nil] :desc Short description of the argument
      #   @option options [String, nil] :description Full description of the argument
      #   @option options [Boolean] :required Whether the argument is required
      #   @option options [Class, Module, Object, Proc] :type A type validator
      #
      # @return [void]
      def argument: (String | Symbol name, *(Class | Module | Object | Proc | String)? type_validator_and_description, ?default: untyped, ?default_generator: untyped, ?default_value: untyped, ?desc: String?, ?description: String?, ?required: bool, ?type: Class | Module | Object | Proc) -> void

      # Executes the command with the given context, handling any errors
      #
      # @param context [Hash] The input context for the command
      #
      # @return [Result] The result of the command execution
      def call: (**untyped context) -> Result

      # Executes the command with the given context, raising any errors
      #
      # @param context [Hash] The input context for the command
      #
      # @raise [ExecutionError] If the command execution fails
      # @return [Result] The result of the command execution
      def call!: (**untyped context) -> Result

      # Defines an output field for the command
      #
      # @overload output(name, *type_validator_and_description, **options)
      #   @param name [String, Symbol] The name of the output field
      #   @param type_validator_and_description [Array<Class, Module, Object, Proc, String, nil>] Type validator or
      #     description arguments
      #   @param options [Hash] Configuration options for the output
      #   @option options [Object] :default A static default value
      #   @option options [Proc] :default_generator A proc that generates the default value
      #   @option options [Object] :default_value Alias for :default
      #   @option options [String, nil] :desc Short description of the output
      #   @option options [String, nil] :description Full description of the output
      #   @option options [Boolean] :required Whether the output is required
      #   @option options [Class, Module, Object, Proc] :type A type validator
      #
      # @return [void]
      def output: (String | Symbol name, *(Class | Module | Object | Proc | String)? type_validator_and_description, ?default: untyped, ?default_generator: untyped, ?default_value: untyped, ?desc: String?, ?description: String?, ?required: bool, ?type: Class | Module | Object | Proc) -> void

      # Specifies an external output context class for the command
      #
      # @param output_context_class [Class] A subclass of {Context::OutputContext}
      #
      # @raise [ArgumentError] If the provided class is not a subclass of {Context::OutputContext}
      # @return [void]
      def returns_data_matching: (singleton(Context::OutputContext) output_context_class) -> void

      private

      # Returns the input context class for the command
      #
      # @return [Class] A subclass of {Context::InputContext}
      def input_context_class: () -> singleton(Context::InputContext)

      # Returns the output context class for the command
      #
      # @return [Class] A subclass of {Context::OutputContext}
      def output_context_class: () -> singleton(Context::OutputContext)

      # Returns the runtime context class for the command
      #
      # @return [Class] A subclass of {Context::RuntimeContext}
      def runtime_context_class: () -> singleton(Context::RuntimeContext)
    end
  end
end
